<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

function create_merchant($posted_data){
	
//	die("reached here");
	require 'curolib/curo.php';
	
	// Example of registering a new Merchant for resellers
	// Data is posted to this script by merchant_register.html
	
	// Use all POST variables except submit
	unset( $posted_data['submit'] );
	$aData = $posted_data;
	if( count( $aData ) == 0 ) {
		die( "No data?" );
	}
	
	// nn_id (account name) can be given, but must be valid without spaces etc and max 20
	if( ! empty( $aData['nn_id'] ) ) {
		$aData['nn_id'] = preg_replace( '/[^a-z0-9_]/i', '', strtolower( substr( $aData['nn_id'], 0, 20 ) ) );
	}
	
	// Add ourselves as technical contact
	$aData = array_merge( $aData, array (
			'tech_attn' => 'Dhr',
			'tech_first_name' => 'Card',
			'tech_last_name' => 'Gate',
			'tech_email' => 'support@cardgate.com'
	) );
	
	// Include any uploaded files
	foreach( $_FILES as $sField => $aFile ) {
		if (
		! empty( $aFile['tmp_name'] ) &&
		is_uploaded_file( $aFile['tmp_name'] ) &&
		move_uploaded_file( $aFile['tmp_name'], $sFile = ( dirname( $aFile['tmp_name'] ) . '/' . $aFile['name'] ) )
		) {
			$aData[$sField] = '@' . $sFile;
		}
	}
	// echo "check<pre>";print_r($aData);
	$oCURO = new CURO();
	
	$mResult = $oCURO->execute( 'merchants', 'create', $aData );
	if ( $mResult !== FALSE ) {
	
		// Process result; send e-mail to merchant etc.
		/*
		 * mResult will contain the following fields:
		* id			=> numeric merchant ID
		* merchant		=> non-numeric ID (accountname/username)
		* secret		=> API hash secret (generated by CURO)
		* username		=> account login name (usually same as merchant)
		* password		=> plain-text password (*NB* will only be human readable here!)
		* sites		=> array with sites:
		*		id		 => site ID
		*		name	 => site name (usually URL without www.)
		*		url		 => website URL
		*		hash_key => API/hash key for website
		*/
	
		// DEBUG
		/* echo 'OK';
		var_dump( $mResult );
		var_dump( $oCURO ); */
		$resonse_data['msg'] = 'success';
		$resonse_data['response'] = $mResult;
	
	} else {
	
		// Use the getError and getErrorNo methods of the CURO instance to determine which error has occured.
		//echo 'ERROR: ' . $oCURO->getError();
		// DEBUG
		//var_export( $oCURO ); 
	
		$resonse_data['msg'] = 'failed';
		$file = fopen(dirname(__FILE__).'/../../assets/log_cardgate.txt','a');
		fwrite($file, (string)$oCURO->getError().'\n\n' );
		fclose($file);
	}
	
	return $resonse_data;
}

function check_status($merchant_id){
	
	$aArgs = array(
			'id' => $merchant_id,  // Merchant ID; can be numeric id or nn_id (non-numeric ID)
	);
	
	require 'curolib/curo.php';
	$oCURO = new CURO();
	
	if( $aResult = $oCURO->execute('merchants', 'status', $aArgs) ) {
	
		/*
		 * aResult['merchant'] will contain merchant fields:
		* id			=> numeric ID
		* nn_id		=> non-numeric ID (accountname/username)
		* name			=> company name
		* email		=> mail e-mail address
		* created		=> account creation date
		* package_id	=> merchant package ID
		* package		=> package name
		* status_id	=> merchant status
		* status		=> status name
		* stage		=> merchant stage
		*/
	
		// echo print_r($aResult,1)."<br />";
		$response['msg'] = 'success';
		$response['response'] =  $aResult;
	} else {
		// echo 'ERROR: ' . $oCURO->getError();
		$response['msg'] = $oCURO->getError();
	}
	return $response;
}


function get_status($merchant_id){
/*	$CI =& get_instance();
	$CI->load->model('Mpayment');
	$merchant_info = $CI->Mpayment->get_merchant_info($company_id);
	$merchant_id = $merchant_info[0]['curo_id']; */
	$merchant_status = check_status($merchant_id);
	if($merchant_status['msg'] == 'success'){
		$merchant_status = $merchant_status['response']['merchant']['status'];
	}
	
	return $merchant_status;
}


function cargate_curl($api,$xml=null){

	include_once 'curolib/curo.config.php';
	global $aConfig;
	$merchant_name = $aConfig['merchant_name'];
	
	$api_key = $aConfig['merchant_api_key'];
	// create a new cURL resource
	$ch = curl_init();
	// set URL and other appropriate options
	curl_setopt($ch, CURLOPT_URL, $api);
	curl_setopt ($ch, CURLOPT_HTTPHEADER, array('Accept: application/json','Content-Type: application/xml'));
	// set HTTP Basic Authentication
	curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
	curl_setopt($ch, CURLOPT_USERPWD, $merchant_name.':'.$api_key);
	curl_setopt($ch, CURLOPT_SSLVERSION, 3);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
	// send XML
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_TIMEOUT, 60);

	if(!empty($xml)){
		curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
	}

	// get server response
	$response = curl_exec($ch);
	// close cURL resource, and free up system resources
	curl_close($ch);
	//print response
	// echo "TEST<pre>";print_r(json_decode($response));
	$response = json_decode($response);

	return $response;

}